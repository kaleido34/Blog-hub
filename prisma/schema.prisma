generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id    String        @id @default(uuid())
  username   String        @unique @db.VarChar(255)
  first_name String        @db.VarChar(255)
  last_name  String        @db.VarChar(255)
  password   String        @db.VarChar(255)
  created_at DateTime      @default(now())
  chatrooms  ChatRoom[]
  messages   Message[]
  spaces     Space[]
  contents   UserContent[]
}

model Space {
  space_id   String         @id @default(uuid())
  user_id    String
  space_name String
  created_at DateTime       @default(now())
  user       User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  contents   SpaceContent[]
}

model Content {
  content_id      String           @id @default(uuid())
  created_at      DateTime         @default(now())
  content_type    ContentType
  chatrooms       ChatRoom[]
  documentContent DocumentContent?
  spaces          SpaceContent[]
  users           UserContent[]
  youtubeContent  YoutubeContent?
}

model SpaceContent {
  space_id   String
  content_id String
  content    Content @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
  space      Space   @relation(fields: [space_id], references: [space_id], onDelete: Cascade)

  @@id([space_id, content_id])
}

model UserContent {
  user_id    String
  content_id String
  content    Content @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
  user       User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, content_id])
}

model YoutubeContent {
  content_id    String    @id @default(uuid())
  youtube_id    String    @unique
  title         String
  description   String
  thumbnail_url String
  youtube_url   String
  transcript    Json
  metadata      Metadata?
  content       Content   @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
}

model DocumentContent {
  content_id String  @id @default(uuid())
  filename   String  @db.VarChar(255)
  file_url   String  @db.VarChar(255)
  doc_id     String  @unique
  hash       String  @unique
  text       String?
  flashcards Json?
  mindmap    Json?
  quiz       Json?
  summary    String?
  transcript Json?
  content    Content @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
}

model Metadata {
  metadata_id    String         @id @default(uuid())
  youtube_id     String         @unique
  summary        String?
  flashcards     Json?
  mindmap        Json?
  quiz           Json?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  youtubeContent YoutubeContent @relation(fields: [youtube_id], references: [youtube_id], onDelete: Cascade)
}

model ChatRoom {
  chatroom_id String    @id @default(uuid())
  content_id  String
  user_id     String
  created_at  DateTime  @default(now())
  content     Content   @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  messages    Message[]

  @@unique([content_id, user_id])
}

model Message {
  message_id  String    @id @default(uuid())
  chatroom_id String
  user_id     String
  parent_id   String?
  content     String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  chatroom    ChatRoom  @relation(fields: [chatroom_id], references: [chatroom_id], onDelete: Cascade)
  parent      Message?  @relation("MessageReplies", fields: [parent_id], references: [message_id], onDelete: Cascade)
  replies     Message[] @relation("MessageReplies")
  user        User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

enum ContentType {
  YOUTUBE_CONTENT
  DOCUMENT_CONTENT
}
