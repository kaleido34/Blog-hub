generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id    String        @id @default(uuid())
  username   String        @unique @db.VarChar(255)
  first_name String        @db.VarChar(255)
  last_name  String        @db.VarChar(255)
  password   String        @db.VarChar(255)
  created_at DateTime      @default(now())
  spaces     Space[]
  contents   UserContent[]
}

model Space {
  space_id   String         @id @default(uuid())
  user_id    String
  space_name String
  created_at DateTime       @default(now())
  user       User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  contents   SpaceContent[]
}

model Content {
  content_id      String           @id @default(uuid())
  created_at      DateTime         @default(now())
  content_type    ContentType
  documentContent DocumentContent?
  audioContent    AudioContent?
  imageContent    ImageContent?
  youtubeContent  YoutubeContent?
  metadata        Metadata?
  spaces          SpaceContent[]
  users           UserContent[]
}

model SpaceContent {
  space_id   String
  content_id String
  content    Content @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
  space      Space   @relation(fields: [space_id], references: [space_id], onDelete: Cascade)

  @@id([space_id, content_id])
}

model UserContent {
  user_id    String
  content_id String
  content    Content @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
  user       User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, content_id])
}

model YoutubeContent {
  content_id    String  @id @default(uuid())
  youtube_id    String  @unique
  title         String
  description   String
  thumbnail_url String
  youtube_url   String
  transcript    Json
  content       Content @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
}

model DocumentContent {
  content_id String  @id @default(uuid())
  filename   String  @db.VarChar(255)
  file_url   String  @db.VarChar(255)
  doc_id     String  @unique
  hash       String  @unique
  text       String?
  transcript Json?
  content    Content @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
}

model AudioContent {
  content_id  String  @id @default(uuid())
  audio_id    String  @unique
  title       String
  description String?
  audio_url   String
  duration    Int?    // in seconds
  transcript  Json?
  content     Content @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
}

model ImageContent {
  content_id  String  @id @default(uuid())
  image_id    String  @unique
  title       String
  description String?
  image_url   String
  text        String? // OCR extracted text
  content     Content @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
}

// Unified metadata model for all content types
model Metadata {
  metadata_id    String   @id @default(uuid())
  content_id     String   @unique
  summary        String?
  audio_summary  String?  // URL to audio file of summary
  flashcards     Json?
  mindmap        Json?
  quiz           Json?
  concept_match  Json?    // Concept match data
  term_builder   Json?    // Term builder data
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  content        Content  @relation(fields: [content_id], references: [content_id], onDelete: Cascade)
}

enum ContentType {
  YOUTUBE_CONTENT
  DOCUMENT_CONTENT
  AUDIO_CONTENT
  IMAGE_CONTENT
}